version: '3.5'

services:
  # Elasticsearch 和 Kibana 服务
  elasticsearch:
    image: elasticsearch:7.17.1
    ports:
      - "9200:9200"
      - "9300:9300"
    container_name: "elasticsearch"
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms2G -Xmx4G
    volumes:
      - ./elastic/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./elastic/data:/usr/share/elasticsearch/data
      - ./elastic/plugins:/usr/share/elasticsearch/plugins
    networks:
      - elastic-network

  kibana:
    image: kibana:7.17.1
    ports:
      - "5601:5601"
    container_name: "kibana"
    depends_on:
      - elasticsearch
    volumes:
      - ./elastic/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
    networks:
      - elastic-network

  # Milvus 相关服务
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/milvus/volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 10s
      retries: 10
    networks:
      - milvus-network

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2024-09-13T20-26-02Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/milvus/volumes/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 10
    networks:
      - milvus-network

  milvus-standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.4.0
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/milvus/volumes/milvus:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      etcd:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - milvus-network
 
  attu:
    container_name: attu
    image: zilliz/attu:v2.4.0
    ports:
      - "8000:3000"
    environment:
      MILVUS_URL: milvus-standalone:19530
    depends_on:
      - milvus-standalone
    networks:
      - milvus-network
  
  neo4j:
    container_name: neo4j-container
    image: neo4j:5.26.0
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - ./neo4j/data:/data
      - ./neo4j/logs:/logs
      - ./neo4j/import:/var/lib/neo4j/import
      - ./neo4j/plugins:/var/lib/neo4j/plugins
    environment:
      NEO4J_AUTH: neo4j/neo4j2025  # 设置 Neo4j 的用户名和密码
    networks:
      - elastic-network            # 加入es的网络，没必要重新创建一个
      
# mysql 相关服务
  adminer:
    container_name: adminer
    image: adminer
    restart: always
    ports:
      - 8080:8080
    links:
      - mysql
    environment:
      - VIRTUAL_HOST=adminer.lmm.art
    networks:
      - elastic-network            # 加入es的网络
     
  mysql:
    image: mysql:5.7  # 官方镜像
    restart: always
    container_name: mysql
    ports:
      - "3306:3306"  
    environment:
      MYSQL_ROOT_PASSWORD: 123456  # 必须：设置root密码
    volumes:
      - ./mysql/data:/var/lib/mysql 
      - ./mysql/conf/my.cnf:/etc/my.cnf
      - /etc/localtime:/etc/localtime:ro # 让容器的时钟与宿主机时钟同步
    networks:
      - elastic-network            # 加入es的网络
networks:
  elastic-network:
  milvus-network:
